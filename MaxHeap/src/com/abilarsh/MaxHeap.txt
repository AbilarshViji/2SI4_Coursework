package com.abilarsh;

public class MaxHeap {
    int numElements; //number of elements in array
    int arrSize; //size of array
    Integer[] heap; //the array storing elements

    public MaxHeap(int i) { //constructor for specified array size
        heap = new Integer[i]; //make array
        numElements = 0; //zero elements currently
        arrSize = i; //array size i
    }

    public MaxHeap(Integer[] someArray) { //constructor for specified array
        arrSize = someArray.length; //set size of array
        heap = new Integer[arrSize]; //set heap array size
        numElements = 0; //set heap size
        for (int i = 0; i < someArray.length; i++) {
            this.insert(someArray[i]); //add all elements from original array to heap array
        }
    }

    public void insert(int n) {
        numElements++; //increment heap size
        if (numElements == 1) { //if heap was originally empty, set first element to n
            heap[0] = n;
            return;
        }
        if (numElements > arrSize) { //double array size if numElement bigger then array size
            Integer[] temp = heap;
            heap = new Integer[arrSize * 2];
            for (int i = 0; i < arrSize; i++) {
                heap[i] = temp[i];
            }
            arrSize *= 2;
        }
        heap[numElements - 1] = n;
        int currentHeapSize = numElements - 1;
        while (heap[currentHeapSize] > heap[getParent(currentHeapSize)]) { //if current element bigger then parent element, swap them
            swap(currentHeapSize, getParent(currentHeapSize));
            currentHeapSize = getParent(currentHeapSize);
        }
    }

    public int deleteMax() {
        if (this.numElements == 0) { //if there are no elements return -0
            return -0;
        }

        int max = heap[0]; //save max value
        heap[0] = heap[numElements - 1]; //set last element to move to first element
        heap[numElements - 1] = null; //set last element to null
        int current = 0;
        numElements--;//decrease number of elements
        if (this.numElements == 1 || this.numElements == 0) { //if there isnt a child, return max
            return max;
        }

        if (heap[current] < heap[getLeftChild(current)] || heap[current] < heap[getRightChild(current)]) { //if current element is less then left or right child
            if (heap[getLeftChild(current)] > heap[getRightChild(current)]) { //if left child is greater then right child
                swap(current, getLeftChild(current)); //swap current and left child
                deleteMax(getLeftChild(current)); //repeat from left child position
            } else { //if right child is greater then left child
                swap(current, getRightChild(current)); //swap current and right child
                deleteMax(getRightChild(current)); //repeat from right child
            }
        }
        return max; //return max
    }

    private void deleteMax(int i) {
        if (this.numElements == 0) { //if no elements, return
            return;
        }
        if (i >= (numElements / 2) && i <= numElements) { //if element is at bottom of tree, return
            return;
        }
        //similar logic as above
        if (heap[i] < heap[getLeftChild(i)] || heap[i] < heap[getRightChild(i)]) { //if current element is less then left or right child
            if (heap[getLeftChild(i)] > heap[getRightChild(i)]) { //if left child greater then right child
                swap(i, getLeftChild(i)); //swap current and left child
                deleteMax(getLeftChild(i)); //repeat from left child
            } else { //else right child greater then left child
                swap(i, getRightChild(i)); //swap current and right child
                deleteMax(getRightChild(i)); //repeat from right child
            }
        }
    }

    public String toString() { //return heap as string
        String toString = "Heap: ";
        for (int i = 0; i < numElements; i++) { //add element to string
            toString += (heap[i] + ", ");
        }
        return toString;
    }

    public static void heapsort(Integer[] arrayToSort) { //it heap sorts
        MaxHeap sorted = new MaxHeap(arrayToSort); //make array into heap

        for (int i = arrayToSort.length - 1; i >= 0; i--) { //get max value of heap and return to specified array
            arrayToSort[i] = sorted.deleteMax();
        }
        for (int i = 0; i < arrayToSort.length; i++) { //print out sorted array in sorted order
            System.out.print(arrayToSort[i] + ", ");

        }
    }

    public int getHeapSize() {
        return numElements;
    } //return heap size (numElementsInArray)

    public int getArrSize() {
        return arrSize;
    } //return array size

    public Integer[] getHeap() {
        return heap;
    } //return heap array

    private int getParent(int i) {
        return (i) / 2;
    } //return parent index

    private int getLeftChild(int i) {
        return (2 * i);
    } //return left child index

    private int getRightChild(int i) {
        return (2 * i) + 1;
    } //return right child index

    private void swap(int a, int b) { //swap two variables in array
        int temp = heap[a];
        heap[a] = heap[b];
        heap[b] = temp;
    }
}
